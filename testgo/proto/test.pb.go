// Code generated by protoc-gen-go.
// source: test.proto
// DO NOT EDIT!

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	HelloRequest
	HelloRequest2
	HelloResponse
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest struct {
	Id  string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HelloRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type HelloRequest2 struct {
	Id  string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *HelloRequest2) Reset()                    { *m = HelloRequest2{} }
func (m *HelloRequest2) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest2) ProtoMessage()               {}
func (*HelloRequest2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloRequest2) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HelloRequest2) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type HelloResponse struct {
	Id  string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HelloResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HelloResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "test.HelloRequest")
	proto.RegisterType((*HelloRequest2)(nil), "test.HelloRequest2")
	proto.RegisterType((*HelloResponse)(nil), "test.HelloResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HelloService service

type HelloServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	HelloStreamA(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloStreamAClient, error)
	HelloStreamB(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloService_HelloStreamBClient, error)
	HelloStreamC(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloStreamCClient, error)
}

type helloServiceClient struct {
	cc *grpc.ClientConn
}

func NewHelloServiceClient(cc *grpc.ClientConn) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/test.HelloService/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) HelloStreamA(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloStreamAClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HelloService_serviceDesc.Streams[0], c.cc, "/test.HelloService/HelloStreamA", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloStreamAClient{stream}
	return x, nil
}

type HelloService_HelloStreamAClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloStreamAClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloStreamAClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceHelloStreamAClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) HelloStreamB(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloService_HelloStreamBClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HelloService_serviceDesc.Streams[1], c.cc, "/test.HelloService/HelloStreamB", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloStreamBClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloService_HelloStreamBClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloStreamBClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloStreamBClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) HelloStreamC(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloStreamCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HelloService_serviceDesc.Streams[2], c.cc, "/test.HelloService/HelloStreamC", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloStreamCClient{stream}
	return x, nil
}

type HelloService_HelloStreamCClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloStreamCClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloStreamCClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceHelloStreamCClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HelloService service

type HelloServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	HelloStreamA(HelloService_HelloStreamAServer) error
	HelloStreamB(*HelloRequest, HelloService_HelloStreamBServer) error
	HelloStreamC(HelloService_HelloStreamCServer) error
}

func RegisterHelloServiceServer(s *grpc.Server, srv HelloServiceServer) {
	s.RegisterService(&_HelloService_serviceDesc, srv)
}

func _HelloService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.HelloService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_HelloStreamA_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).HelloStreamA(&helloServiceHelloStreamAServer{stream})
}

type HelloService_HelloStreamAServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloServiceHelloStreamAServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloStreamAServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceHelloStreamAServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloService_HelloStreamB_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServiceServer).HelloStreamB(m, &helloServiceHelloStreamBServer{stream})
}

type HelloService_HelloStreamBServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type helloServiceHelloStreamBServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloStreamBServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloService_HelloStreamC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).HelloStreamC(&helloServiceHelloStreamCServer{stream})
}

type HelloService_HelloStreamCServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloServiceHelloStreamCServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloStreamCServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceHelloStreamCServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloService_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloStreamA",
			Handler:       _HelloService_HelloStreamA_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloStreamB",
			Handler:       _HelloService_HelloStreamB_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HelloStreamC",
			Handler:       _HelloService_HelloStreamC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x0c, 0xb8, 0x78, 0x3c, 0x52,
	0x73, 0x72, 0xf2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xf8, 0xb8, 0x98, 0x32, 0x53,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98, 0x32, 0x53, 0x84, 0x04, 0xb8, 0x98, 0x73, 0x8b,
	0xd3, 0x25, 0x98, 0xc0, 0x02, 0x20, 0xa6, 0x92, 0x21, 0x17, 0x2f, 0xb2, 0x0e, 0x23, 0x92, 0xb4,
	0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x12, 0xd6, 0x62, 0xf4, 0x99, 0x11, 0xea, 0xb0, 0xe0, 0xd4,
	0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x03, 0x2e, 0x56, 0x30, 0x5f, 0x48, 0x48, 0x0f, 0xec, 0x09,
	0x64, 0x37, 0x48, 0x09, 0xa3, 0x88, 0x41, 0x2d, 0xb1, 0x84, 0x99, 0x50, 0x52, 0x94, 0x9a, 0x98,
	0xeb, 0x48, 0xb4, 0x46, 0x0d, 0x46, 0x34, 0xad, 0x4e, 0x44, 0x6b, 0x35, 0x60, 0x14, 0xb2, 0x46,
	0xd1, 0xea, 0x4c, 0x82, 0xad, 0x06, 0x8c, 0x4e, 0x9c, 0x51, 0xec, 0x7a, 0xfa, 0xd6, 0x20, 0xc9,
	0x24, 0x36, 0x70, 0x2c, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x78, 0xaf, 0x2e, 0xc2, 0xb3,
	0x01, 0x00, 0x00,
}
